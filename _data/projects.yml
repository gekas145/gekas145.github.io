- name: handwriter
  date: "Oct, 2024"
  link: https://github.com/gekas145/handwriter
  media: /assets/projects/handwriter.gif
  tools: "Python, tensorflow, google cloud"
  description: >
    Deep RNN that uses LSTM blocks and simple attention mechanism to generate human-like handwriting based on provided text transcriptions. Whole network code implemented in tensorflow, the training itself was carried out on GCP VM.  

- name: ctc-commands
  link: https://github.com/gekas145/ctc-commands
  date: "Oct, 2023"
  tools: "Python, pytorch"
  description: >
    Deep RNN trained to recognize simple voice commands using Connectionist Temporal Classification(CTC) loss. Network and data processing were implemented in pytorch.

- name: wave-function-collapse
  link: https://github.com/gekas145/wave-function-collapse
  date: "Aug, 2023"
  tools: "Python"
  description: >
    An algorithm for image generation with no machine learning models involved.

- name: SOM
  link: https://github.com/gekas145/SOM
  date: "Apr, 2023"
  tools: "Python, numpy, scikit-learn"
  description: >
    Self-organizing map, aka SOM, aka Kohonen network implementation in Python. This algorithm is useful for visualising high-dimensional data.

- name: Snake
  date: "Dec, 2022"
  link: https://github.com/gekas145/Snake
  media: /assets/projects/cnn_snake.gif
  tools: "Python, tensorflow"
  description: >
    Convolutional neural network is trained to play Snake game. The only information available to the network are images of game board, just as it is with humans. The network is trained by Deep Double Q-Network(DDQN) algorithm.

- name: NEAT
  date: "Jul, 2021"
  link: https://github.com/gekas145/NEAT
  media: /assets/projects/neat_dpb.gif
  tools: "Python, pymunk, numpy"
  description: >
    Neural Evolutions of Augmenting Topologies(NEAT) algorithm implementation from scratch which is tried out with xor, single and double poles balancing tasks.

- name: MNIST
  date: "Aug, 2020"
  link: https://github.com/gekas145/Neural-Network-MNIST
  tools: "Python, numpy"
  media: /assets/projects/mnist_draw_app.gif
  description: >
    Multi Layer Perseptron(MLP) and some optimizers(SGD, momentum) implemented in numpy from scratch. Trained to recognize handwritten digits from original MNIST dataset. Comes with simple drawing application to test on seld-drawn samples.